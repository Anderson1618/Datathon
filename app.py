# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0nDYBSLwg1onTOtfKQvhqT4Ehcnb-_H
"""
import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

# Carregar e preparar os dados
file_path = '/mnt/data/BD_final.csv.csv'
df = pd.read_csv(file_path, delimiter=';')

# Preenchimento de valores nulos
df.fillna(0, inplace=True)

# Codificação de variáveis categóricas
label_encoder_pedra = LabelEncoder()
label_encoder_virada = LabelEncoder()
label_encoder_bolsa = LabelEncoder()

df['PEDRA_2020'] = label_encoder_pedra.fit_transform(df['PEDRA_2020'])
df['PONTO_VIRADA_2022'] = label_encoder_virada.fit_transform(df['PONTO_VIRADA_2022'])
df['INDICADO_BOLSA_2022'] = label_encoder_bolsa.fit_transform(df['INDICADO_BOLSA_2022'])

# Separação de features e target para "Indicação para Bolsa"
features = df[['ANO_INGRESSO', 'INDE_2020', 'IAA_2020', 'IEG_2020', 'IDA_2020', 'PEDRA_2020']]
target_bolsa = df['INDICADO_BOLSA_2022']

# Separação de features e target para "Ponto de Virada"
target_virada = df['PONTO_VIRADA_2022']

# Dividir os dados em treino e teste
X_train_bolsa, X_test_bolsa, y_train_bolsa, y_test_bolsa = train_test_split(features, target_bolsa, test_size=0.2, random_state=42)
X_train_virada, X_test_virada, y_train_virada, y_test_virada = train_test_split(features, target_virada, test_size=0.2, random_state=42)

# Padronização das features
scaler = StandardScaler()
X_train_bolsa = scaler.fit_transform(X_train_bolsa)
X_test_bolsa = scaler.transform(X_test_bolsa)
X_train_virada = scaler.fit_transform(X_train_virada)
X_test_virada = scaler.transform(X_test_virada)

# Treinamento dos modelos RandomForest
rf_bolsa = RandomForestClassifier(random_state=42)
rf_bolsa.fit(X_train_bolsa, y_train_bolsa)

rf_virada = RandomForestClassifier(random_state=42)
rf_virada.fit(X_train_virada, y_train_virada)

# Calcular acurácia dos modelos
bolsa_accuracy = accuracy_score(y_test_bolsa, rf_bolsa.predict(X_test_bolsa))
virada_accuracy = accuracy_score(y_test_virada, rf_virada.predict(X_test_virada))

# Criar interface no Streamlit
st.title("Previsão de Bolsa, Ponto de Virada e INDE para 2023")

# Adicionar explicação sobre a acurácia
st.write("""
### Lógica de Acurácia
A acurácia apresentada para os modelos de previsão de Bolsa e Ponto de Virada é baseada na proporção de previsões corretas que o modelo faz em comparação ao total de previsões. Para o modelo ARIMA de previsão de INDE, usamos a métrica de Erro Médio Quadrático Raiz (RMSE), que mede a diferença entre os valores previstos pelo modelo e os valores reais, indicando a precisão do modelo.
""")

# 3. Adicionar possibilidade de comparar múltiplos alunos
comparar_ids = st.multiselect("Selecione IDs de alunos para comparação", df['ID_ALUNO'].unique())

# Filtrar os dados dos alunos selecionados
alunos_data = df[df['ID_ALUNO'].isin(comparar_ids)].sort_values(by='ANO_INGRESSO')

# 5. Verificar se os dados do aluno estão disponíveis
if not alunos_data.empty:
    cols = st.columns(len(comparar_ids))  # Criar colunas para exibir gráficos lado a lado

    for index, id_aluno in enumerate(comparar_ids):
        aluno_data = alunos_data[alunos_data['ID_ALUNO'] == id_aluno]

        # Preparar os dados do aluno para previsões
        ano_ingresso = aluno_data['ANO_INGRESSO'].values[0]
        inde_series = aluno_data.set_index('ANO_INGRESSO')['INDE_2020']

        # 6. Ajustar o modelo ARIMA para prever INDE
        try:
            model = ARIMA(inde_series, order=(1, 1, 1))
            model_fit = model.fit()
            forecast = model_fit.forecast(steps=1)  # Prever apenas 2023

            # Previsão de INDE para 2023
            inde_2023 = forecast.iloc[0]

            # Calcular erro (RMSE) do modelo ARIMA
            arima_rmse = np.sqrt(mean_squared_error(inde_series, model_fit.predict(start=inde_series.index[0], end=inde_series.index[-1])))

        except Exception as e:
            st.error(f"Erro ao gerar previsão ARIMA para o aluno {id_aluno}: {e}")
            inde_2023 = None
            arima_rmse = None

        # Fazer previsões para Bolsa e Ponto de Virada
        input_data = np.array([[ano_ingresso, inde_series.iloc[-1], aluno_data['IAA_2020'].values[0], aluno_data['IEG_2020'].values[0], aluno_data['IDA_2020'].values[0], aluno_data['PEDRA_2020'].values[0]]])
        input_data_scaled = scaler.transform(input_data)

        pred_bolsa = rf_bolsa.predict(input_data_scaled)
        pred_virada = rf_virada.predict(input_data_scaled)

        # Traduzir as previsões para os valores originais
        bolsa_pred = label_encoder_bolsa.inverse_transform(pred_bolsa)
        virada_pred = label_encoder_virada.inverse_transform(pred_virada)

        with cols[index]:
            # 7. Mostrar acurácia dos modelos com resultados grifados
            st.write(f"**Aluno {id_aluno}:**")
            st.write(f"**Acurácia para previsão de Bolsa:** **{bolsa_accuracy:.2f}**")
            st.write(f"**Acurácia para previsão de Ponto de Virada:** **{virada_accuracy:.2f}**")
            if arima_rmse is not None:
                st.write(f"**RMSE para INDE:** **{arima_rmse:.2f}**")

            # Exibir resultados grifados
            st.write(f"**Previsão de Bolsa para 2023:** **{'Sim' if bolsa_pred[0] == 1 else 'Não'}**")
            st.write(f"**Ponto de Virada em 2023:** **{'Sim' if virada_pred[0] == 1 else 'Não'}**")

            if inde_2023 is not None:
                # Concatenação da previsão com a série existente
                inde_history = pd.concat([inde_series, pd.Series([inde_2023], index=[2023])])

                st.write(f"### Evolução do INDE (2020-2023)")
                fig, ax = plt.subplots(figsize=(6, 3))  # Ajustar o tamanho do gráfico

                # 8. Plotar os anos até 2022 em azul
                ax.plot(inde_history.index[:len(inde_series)], inde_history.iloc[:len(inde_series)], marker='o', linestyle='-', color='blue')

                # Plotar a linha vermelha de 2022 para 2023
                ax.plot([2022, 2023], [inde_series.loc[2022], inde_2023], marker='o', linestyle='-', color='red')

                # Adicionar valores no gráfico
                for i in inde_history.index:
                    ax.text(i, inde_history.loc[i], f'{inde_history.loc[i]:.2f}', fontsize=10, ha='center', color='white')

                # Configurar visual do gráfico
                ax.set_facecolor('#0E1117')
                fig.patch.set_facecolor('#0E1117')
                ax.set_title(f'INDE Aluno {id_aluno}', fontsize=14, color='white')
                ax.set_ylabel('INDE', fontsize=12, color='white')
                ax.set_xlabel('Ano', fontsize=12, color='white')
                ax.set_xticks([2020, 2021, 2022, 2023])
                ax.tick_params(colors='white')
                ax.yaxis.set
