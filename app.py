# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0nDYBSLwg1onTOtfKQvhqT4Ehcnb-_H
"""
import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

# Carregar e preparar os dados
file_path = 'BD_modelo.csv'
df = pd.read_csv(file_path)

# Filtrar alunos que possuem dados suficientes para análise (exemplo: dados de 2022 e anteriores)
alunos_completos = df.groupby('ID_ALUNO').filter(lambda x: x['ano'].max() == 2022)

# Codificar variáveis categóricas
label_encoder_pedra = LabelEncoder()
label_encoder_virada = LabelEncoder()

alunos_completos['PEDRA'] = label_encoder_pedra.fit_transform(alunos_completos['PEDRA'])
alunos_completos['PONTO_VIRADA'] = label_encoder_virada.fit_transform(alunos_completos['PONTO_VIRADA'])

# Separar as features e os targets
X = alunos_completos[['ANO_INGRESSO', 'INDE', 'ano']]
y_pedra = alunos_completos['PEDRA']
y_virada = alunos_completos['PONTO_VIRADA']

# Dividir os dados para calcular acurácia
X_train, X_test, y_train_pedra, y_test_pedra = train_test_split(X, y_pedra, test_size=0.2, random_state=42)
_, _, y_train_virada, y_test_virada = train_test_split(X, y_virada, test_size=0.2, random_state=42)

# Padronizar as features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Treinar os modelos para PEDRA e PONTO_VIRADA
rf_pedra = RandomForestClassifier(random_state=42)
rf_pedra.fit(X_train, y_train_pedra)

rf_virada = RandomForestClassifier(random_state=42)
rf_virada.fit(X_train, y_train_virada)

# Calcular acurácia dos modelos de PEDRA e PONTO_VIRADA
pedra_accuracy = accuracy_score(y_test_pedra, rf_pedra.predict(X_test))
virada_accuracy = accuracy_score(y_test_virada, rf_virada.predict(X_test))

# Criar interface no Streamlit
st.title("Previsão de Pedra, Ponto de Virada e INDE para 2023")

# Adicionar explicação sobre a acurácia
st.write("""
### Lógica de Acurácia e Métricas
A acurácia apresentada para os modelos de previsão de Pedra e Ponto de Virada é baseada nas previsões corretas feitas pelo modelo em comparação ao total de previsões. Para o modelo ARIMA de previsão de INDE, usamos a métrica de Erro Médio Quadrático Raiz (RMSE), que mede a diferença entre os valores previstos pelo modelo e os valores reais, indicando a precisão do modelo.
""")

# Análise Comparativa de Múltiplos Alunos
comparar_ids = st.multiselect("Selecione IDs de alunos para comparação", alunos_completos['ID_ALUNO'].unique())

# Filtrar os dados dos alunos selecionados
alunos_data = alunos_completos[alunos_completos['ID_ALUNO'].isin(comparar_ids)].sort_values(by='ano')

# Gráficos de Tendências
if not alunos_data.empty:
    st.write("### Tendência do INDE ao longo do tempo para Alunos Selecionados")
    fig, ax = plt.subplots()
    for id_aluno in comparar_ids:
        aluno_data = alunos_data[alunos_data['ID_ALUNO'] == id_aluno]
        ax.plot(aluno_data['ano'], aluno_data['INDE'], marker='o', linestyle='-', label=f'Aluno {id_aluno}')

    ax.set_title('Tendência do INDE ao longo do tempo')
    ax.set_xlabel('Ano')
    ax.set_ylabel('INDE')
    ax.legend()
    st.pyplot(fig)

    # Gráfico de correlação
    correlation = alunos_completos[['INDE', 'PEDRA', 'PONTO_VIRADA']].corr()
    fig_corr, ax_corr = plt.subplots()
    cax = ax_corr.matshow(correlation, cmap='coolwarm')
    fig_corr.colorbar(cax)
    ax_corr.set_xticks(np.arange(len(correlation.columns)))
    ax_corr.set_yticks(np.arange(len(correlation.columns)))
    ax_corr.set_xticklabels(correlation.columns)
    ax_corr.set_yticklabels(correlation.columns)
    st.pyplot(fig_corr)

    cols = st.columns(len(comparar_ids))  # Criar colunas para exibir gráficos lado a lado

    for index, id_aluno in enumerate(comparar_ids):
        aluno_data = alunos_data[alunos_data['ID_ALUNO'] == id_aluno]

        # Preparar os dados do aluno para previsões
        inde_series = aluno_data.set_index('ano')['INDE']

        # Ajustar o modelo ARIMA para prever INDE
        try:
            model = ARIMA(inde_series, order=(1, 1, 1))
            model_fit = model.fit()
            forecast = model_fit.forecast(steps=1)  # Prever apenas 2023

            # Previsão de INDE para 2023
            inde_2023 = forecast.iloc[0]

            # Calcular erro (RMSE) do modelo ARIMA
            arima_rmse = np.sqrt(mean_squared_error(inde_series, model_fit.predict(start=inde_series.index[0], end=inde_series.index[-1])))

        except Exception as e:
            st.error(f"Erro ao gerar previsão ARIMA para o aluno {id_aluno}: {e}")
            inde_2023 = None
            arima_rmse = None

        # Fazer previsões para PEDRA e PONTO_VIRADA
        input_data = np.array([[aluno_data['ANO_INGRESSO'].values[0], inde_series.iloc[-1], 2023]])
        input_data_scaled = scaler.transform(input_data)

        pred_pedra = rf_pedra.predict(input_data_scaled)
        pred_virada = rf_virada.predict(input_data_scaled)

        # Traduzir a previsão de pedra para o valor original
        pedra_pred = label_encoder_pedra.inverse_transform(pred_pedra)

        with cols[index]:
            st.write(f"**Aluno {id_aluno}:**")

            if arima_rmse is not None:
                st.write(f"**RMSE para INDE:** **{arima_rmse:.2f}**")

            st.write(f"**Previsão de Pedra para 2023:** **{pedra_pred[0]}**")
            st.write(f"**Ponto de Virada em 2023:** **{'Sim' if pred_virada[0] == 1 else 'Não'}**")

            if inde_2023 is not None:
                # Concatenação da previsão com a série existente
                inde_history = pd.concat([inde_series, pd.Series([inde_2023], index=[2023])])

                st.write(f"### Evolução do INDE (2020-2023)")
                fig, ax = plt.subplots(figsize=(6, 3))

                # Plotar os anos até 2022 em azul
                ax.plot(inde_history.index[:len(inde_series)], inde_history.iloc[:len(inde_series)], marker='o', linestyle='-', color='blue')

                # Plotar a linha vermelha de 2022 para 2023
                ax.plot([2022, 2023], [inde_series.loc[2022], inde_2023], marker='o', linestyle='-', color='red')

                # Adicionar valores no gráfico
                for i in inde_history.index:
                    ax.text(i, inde_history.loc[i], f'{inde_history.loc[i]:.2f}', fontsize=10, ha='center', color='white')

                # Configurar visual do gráfico
                ax.set_facecolor('#0E1117')
                fig.patch.set_facecolor('#0E1117')
                ax.set_title(f'INDE Aluno {id_aluno}', fontsize=14, color='white')
                ax.set_ylabel('INDE', fontsize=12, color='white')
                ax.set_xlabel('Ano', fontsize=12, color='white')
                ax.set_xticks([2020, 2021, 2022, 2023])
                ax.tick_params(colors='white')
                ax.yaxis.set_visible(False)
                ax.legend().set_visible(False)
                st.pyplot(fig)

# 6. Predições Personalizadas - Cenários "What-If"
st.write("### Simulação de Cenários 'What-If'")
sim_id = st.selectbox("Selecione o ID do Aluno para Simulação", alunos_completos['ID_ALUNO'].unique())
sim_inde = st.number_input("Projeção de INDE para 2023 (Simulação)", value=50.0, min_value=0.0, max_value=100.0)

# Preparar dados de entrada simulados
input_simulation = np.array([[alunos_completos.loc[alunos_completos['ID_ALUNO'] == sim_id, 'ANO_INGRESSO'].values[0], sim_inde, 2023]])
input_simulation_scaled = scaler.transform(input_simulation)

# Fazer previsões com os dados simulados
sim_pred_pedra = rf_pedra.predict(input_simulation_scaled)
sim_pred_virada = rf_virada.predict(input_simulation_scaled)

# Traduzir a previsão de pedra para o valor original
sim_pedra_pred = label_encoder_pedra.inverse_transform(sim_pred_pedra)

# Exibir resultados da simulação
st.write(f"**Previsão Simulada de Pedra para 2023:** **{sim_pedra_pred[0]}**")
st.write(f"**Ponto de Virada em 2023 (Simulado):** **{'Sim' if sim_pred_virada[0] == 1 else 'Não'}**")

# Mostrar Métricas dos Modelos no final do site
st.write("### Métricas dos Modelos")

st.write(f"**Acurácia para previsão de Pedra:** **{pedra_accuracy:.2f}**")
st.write(f"**Acurácia para previsão de Ponto de Virada:** **{virada_accuracy:.2f}**")

# Opcional: Mostrar os dados brutos (para análise detalhada)
if st.checkbox("Mostrar dados brutos dos alunos"):
    st.write(alunos_completos)
